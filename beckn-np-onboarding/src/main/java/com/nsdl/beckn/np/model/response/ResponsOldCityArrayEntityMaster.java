/*
 * APIs to be used by ONDC Network Participant
 * ONDC Network Participant Onboarding APIs
 *
 * OpenAPI spec version: 0.0.5
 * Contact: team@ondc.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nsdl.beckn.np.model.response;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.nsdl.beckn.np.utl.Constants;

import lombok.Data;

/**
 * ReqDinit
 */

@Data
public class ResponsOldCityArrayEntityMaster extends ResponsOldEntityParentMaster {

	@JsonProperty("city")
	private String city = null;

	public ResponsOldCityArrayEntityMaster(ResponsEntityMaster master, ResponseNetworkParticipant np) {
		this.initValue(master, np);
	}

	public void initValue(ResponsEntityMaster master, ResponseNetworkParticipant np) {
		this.subscriberId = master.getSubscriberId();
		this.status = Constants.STATUS_SUBSCRIBED;
		this.ukId = master.getUniqueKeyId();
		this.subscriberUrl = "https://" + master.getSubscriberId() + np.getSubscriberUrl();

		this.city = toStringCity(np.getCityCode());
		// this.callbackUrl = master.getCallbackUrl();
		this.country = master.getCountry();
		this.domain = np.getDomain();

		this.validFrom = master.getValidFrom();
		this.validUntil = master.getValidUntil();
		if (Constants.BUYER_APP.equals(np.getType())) {
			this.type = "BAP";
		} else if (Constants.SELLER_APP.equals(np.getType())) {
			this.type = "BPP";
		} else if (Constants.GATEWAY.equals(np.getType())) {
			this.type = "BG";
		} else {
			this.type = np.getType();
		}

		this.signingPublicKey = master.getSigningPublicKey();
		this.encrPublicKey = master.getEncrPublicKey();
		this.created = master.getCreated();
		this.updated = master.getUpdated();
		this.brId = master.getUniqueKeyId();

	}

	public ResponsOldCityArrayEntityMaster(ResponsEntityMaster item, ResponseNetworkParticipant np,
			ResponseSellerOnRecord seller) {

		this.initValue(item, np);
		this.brId = seller.getUniqueKeyId();
		this.ukId = seller.getUniqueKeyId();

		this.signingPublicKey = seller.getKeyPair().getSigningPublicKey();
		this.encrPublicKey = seller.getKeyPair().getEncryptionPublicKey();
		this.city = toStringCity(seller.getCityCode());
		this.validFrom = seller.getKeyPair().getValidFrom();
		this.validUntil = seller.getKeyPair().getValidUntil();

	}

	public String toStringCity(List<String> city) {
		StringBuilder data = new StringBuilder();
		for (int i = 0; i < city.size(); i++) {
			if (i == (city.size() - 1)) {
				data.append(city.get(i));
			} else {
				data.append(city.get(i)).append(",");
			}
		}
		return data.toString();
	}
}
