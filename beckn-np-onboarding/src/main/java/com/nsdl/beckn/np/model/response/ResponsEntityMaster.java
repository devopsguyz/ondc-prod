/*
 * APIs to be used by ONDC Network Participant
 * ONDC Network Participant Onboarding APIs
 *
 * OpenAPI spec version: 0.0.5
 * Contact: team@ondc.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nsdl.beckn.np.model.response;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Arrays;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.Gson;
import com.nsdl.beckn.np.utl.CommonUtl;

import lombok.Data;

/**
 * ReqDinit
 */

@Data
public class ResponsEntityMaster {

	public ResponsEntityMaster() {

	}

	@JsonProperty("subscriber_id")
	private String subscriberId = null;

	@JsonProperty("city")
	private List<String> city = null;

	@JsonProperty("country")
	private String country = null;

	@JsonProperty("valid_from")
	private String validFrom = null;

	@JsonProperty("valid_until")
	private String validUntil = null;

	@JsonProperty("signing_public_key")
	private String signingPublicKey = null;

	@JsonProperty("encr_public_key")
	private String encrPublicKey = null;

	@JsonProperty("created")
	private String created = null;

	@JsonProperty("updated")
	private String updated = null;

	@JsonProperty("unique_key_id")
	private String uniqueKeyId = null;

	@JsonProperty("network_participant")
	List<ResponseNetworkParticipant> networkParticipantMasters = new ArrayList();

//	@JsonProperty("callback_url")
//	String callbackUrl;

	@JsonIgnore()
	Map<String, Integer> mapNP = new HashMap();

//	@JsonProperty("callback_url")
//	String callbackUrl;

	public ResponsEntityMaster(ApiEntityMasterProjection obj) {
		this.country = obj.getCOUNTRY();
		this.created = CommonUtl.getSQLDateString(obj.getVALIDFROM());
		this.subscriberId = obj.getSUBSCRIBERID();
		this.updated = CommonUtl.getSQLDateString(obj.getUPDATED());
		this.encrPublicKey = obj.getENCRYPT();
		this.signingPublicKey = obj.getSIGNING();
		this.validFrom = CommonUtl.getSQLDateString(obj.getVALIDFROM());
		this.validUntil = CommonUtl.getSQLDateString(obj.getVALIDUNTIL());
		this.uniqueKeyId = obj.getUNIQUEKEYID();
		this.city = new Gson().fromJson(obj.getECITYCODE(), List.class);
	}

	public ResponsEntityMaster(Object[] obj) {
		this.subscriberId = obj[9].toString();
		this.city = (List) obj[1];
		this.country = obj[6].toString();
		this.encrPublicKey = obj[5].toString();

		this.signingPublicKey = obj[7].toString();
		this.uniqueKeyId = obj[10].toString();

		this.created = CommonUtl.getDateString((OffsetDateTime) obj[14]);
		this.updated = CommonUtl.getDateString((OffsetDateTime) obj[15]);

		this.validFrom = CommonUtl.getDateString((OffsetDateTime) obj[12]);
		this.validUntil = CommonUtl.getDateString((OffsetDateTime) obj[13]);

	}
	
	public ResponsEntityMaster(MatViewResponse obj) {
		this.subscriberId = obj.getSUBSCRIBERID();
		this.city = Arrays.asList(new Gson().fromJson(obj.getCITYCODE(), String[].class));
		this.country = obj.getCOUNTRY();
		this.encrPublicKey = obj.getENCRYPT();

		this.signingPublicKey = obj.getSIGNING();
		this.uniqueKeyId = obj.getUNIQUEKEYID();

		
		this.created = CommonUtl.getDateString(obj.getCREATED());
		this.updated = CommonUtl.getDateString(obj.getUPDATED());

		this.validFrom = CommonUtl.getDateString(obj.getVALIDFROM());
		this.validUntil = CommonUtl.getDateString(obj.getVALIDUNTIL());

	}

	public void addNp(ApiEntityMasterProjection obj) {
		String key = obj.getUNIQUEKEYID() + ":" + obj.getSUBSCRIBERID() + ":" + obj.getTYPE() + ":" + obj.getDOMAIN()
				+ ":" + obj.getSUBSCRIBERURL();
		if (mapNP.get(key) == null) {
			ResponseNetworkParticipant np = new ResponseNetworkParticipant(obj);
			this.networkParticipantMasters.add(np);
			mapNP.put(key, this.networkParticipantMasters.size() - 1);
		}
		if (obj.getSELLERUNIQUEKEYID() != null) {
			this.networkParticipantMasters.get(mapNP.get(key)).addSeller(obj);
		}
	}

	public void addNp(Object[] obj,boolean sorRequired) {
		// UkID:subscriber_id:type:domain:subscriberURL
		String key = obj[0].toString() + ":" + obj[9].toString() + ":" + obj[23].toString() + ":" + obj[11].toString()
				+ ":" + obj[21].toString();
		if (mapNP.get(key) == null) {
			ResponseNetworkParticipant np = new ResponseNetworkParticipant(obj);
			this.networkParticipantMasters.add(np);
			mapNP.put(key, this.networkParticipantMasters.size() - 1);
		}
		if (obj[18] != null && sorRequired) {
			this.networkParticipantMasters.get(mapNP.get(key)).addSeller(obj);
		 
		}
	}
	
	public void addNp(MatViewResponse obj,boolean sorRequired) {
		// UkID:subscriber_id:type:domain:subscriberURL
		String key = obj.getID() + ":" + obj.getSUBSCRIBERID() + ":" + obj.getTYPE() + ":" + obj.getDOMAIN()
				+ ":" + obj.getSUBSCRIBERURL();
		if (mapNP.get(key) == null) {
			ResponseNetworkParticipant np = new ResponseNetworkParticipant(obj);
			this.networkParticipantMasters.add(np);
			mapNP.put(key, this.networkParticipantMasters.size() - 1);
		}
		if (obj.getSELLERUNIQUEKEYID() != null && sorRequired) {
			this.networkParticipantMasters.get(mapNP.get(key)).addSeller(obj);
		 
		}
	}
}
