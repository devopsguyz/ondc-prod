/*
 * APIs to be used by ONDC Network Participant
 * ONDC Network Participant Onboarding APIs
 *
 * OpenAPI spec version: 0.0.5
 * Contact: team@ondc.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nsdl.beckn.np.model.response;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.Gson;
import com.nsdl.beckn.np.utl.CommonUtl;

import lombok.Data;
import static org.apache.commons.lang3.StringUtils.deleteWhitespace;
/**
 * ReqDinit
 */

@Data
public class ResponsOldEntityParentMaster {

	@JsonProperty("subscriber_id")
	public String subscriberId = null;

	@JsonProperty("status")
	public String status = null;

	@JsonProperty("ukId")
	public String ukId = null;

	@JsonProperty("subscriber_url")
	public String subscriberUrl;

	@JsonProperty("country")
	public String country = null;

	@JsonProperty("domain")
	public String domain;

	@JsonProperty("valid_from")
	public String validFrom = null;

	@JsonProperty("valid_until")
	public String validUntil = null;

	@JsonProperty("type")
	public String type;

	@JsonProperty("signing_public_key")
	public String signingPublicKey = null;

	@JsonProperty("encr_public_key")
	public String encrPublicKey = null;

	@JsonProperty("created")
	public String created = null;

	@JsonProperty("updated")
	public String updated = null;

	@JsonProperty("br_id")
	public String brId = null;

	@JsonProperty("city")
	public String city = null;

	public ResponsOldEntityParentMaster() {

	}

	public ResponsOldEntityParentMaster(ApiEntityMasterProjection obj, String type, String city) {
		this.country = obj.getCOUNTRY();
		// Timestamp dt=obj.getVALIDFROM();
		this.created = CommonUtl.getSQLDateString(obj.getVALIDFROM());
		this.domain = obj.getDOMAIN();
		this.status = obj.getSTATUS();
		this.subscriberId = obj.getSUBSCRIBERID();
		this.subscriberUrl =deleteWhitespace("https://" + obj.getSUBSCRIBERID() + obj.getSUBSCRIBERURL());
		this.type = obj.getTYPE();
		if ("buyerApp".equals(this.type)) {
			this.type = "BAP";
		} else if ("sellerApp".equals(this.type)) {
			this.type = "BPP";
		} else if ("gateway".equals(this.type)) {
			this.type = "BG";
		}
		this.updated = CommonUtl.getSQLDateString(obj.getUPDATED());

		if ("seller".equals(type)) {
			this.ukId = obj.getSELLERUNIQUEKEYID();
			this.encrPublicKey = obj.getSELLERENCRYPTION();
			this.signingPublicKey = obj.getSELLERSIGNING();
			this.brId = obj.getSELLERUNIQUEKEYID();
			this.validFrom = CommonUtl.getSQLDateString(obj.getSELLERVALIDFROM());
			this.validUntil = CommonUtl.getSQLDateString(obj.getSELLERVALIDUNTIL());
			if ("".equals(city)) {
				this.city = toStringCity((List<String>) new Gson().fromJson(obj.getSELLERCITYCODE(), List.class));
			} else {
				this.city = city;
			}
		} else {
			this.ukId = obj.getUNIQUEKEYID();
			this.encrPublicKey = obj.getENCRYPT();
			this.signingPublicKey = obj.getSIGNING();
			this.brId = obj.getUNIQUEKEYID();
			this.validFrom = CommonUtl.getSQLDateString(obj.getVALIDFROM());
			this.validUntil = CommonUtl.getSQLDateString(obj.getVALIDUNTIL());
			if ("".equals(city)) {
				this.city = toStringCity((List<String>) new Gson().fromJson(obj.getCITYCODE(), List.class));
			} else {
				this.city = city;
			}
		}

	}

	public ResponsOldEntityParentMaster(Object[] obj, String type, String city) {
		this.country = obj[6].toString();
		// Timestamp dt=obj.getVALIDFROM();
		this.created =  CommonUtl.getDateString((OffsetDateTime) obj[14]);
		this.domain = obj[11].toString();
		this.status = "SUBSCRIBED";
		this.subscriberId = obj[9].toString();
		this.subscriberUrl =deleteWhitespace("https://" +obj[9].toString() + obj[21].toString());
		this.type = obj[23].toString();
		if ("buyerApp".equals(this.type)) {
			this.type = "BAP";
		} else if ("sellerApp".equals(this.type)) {
			this.type = "BPP";
		} else if ("gateway".equals(this.type)) {
			this.type = "BG";
		}
		this.updated = CommonUtl.getDateString((OffsetDateTime) obj[15]);

		if ("seller".equals(type)) {
			this.ukId = obj[18].toString();
			this.encrPublicKey = obj[16].toString();
			this.signingPublicKey = obj[17].toString();
			this.brId = obj[18].toString();
			this.validFrom =  CommonUtl.getDateString((OffsetDateTime) obj[19]);
			this.validUntil =  CommonUtl.getDateString((OffsetDateTime) obj[20]);
			if ("".equals(city)) {
				this.city = toStringCity((List)obj[3]);
			} else {
				this.city = city;
			}
		} else {
			this.ukId =obj[10].toString();
			this.encrPublicKey =  obj[5].toString();
			this.signingPublicKey =  obj[7].toString();
			this.brId =  obj[10].toString();
			this.validFrom =CommonUtl.getDateString((OffsetDateTime) obj[12]);
			this.validUntil = CommonUtl.getDateString((OffsetDateTime) obj[13]);
			if ("".equals(city)) {
				this.city = toStringCity((List) obj[1]);
			} else {
				this.city = city;
			}
		}

	}
	
	public ResponsOldEntityParentMaster(MatViewResponse obj, String type, String city) {
		this.country = obj.getCOUNTRY();
		// Timestamp dt=obj.getVALIDFROM();
		this.created =  CommonUtl.getDateString(obj.getCREATED());
		this.domain = obj.getDOMAIN();
		this.status = "SUBSCRIBED";
		this.subscriberId = obj.getSUBSCRIBERID();
		this.subscriberUrl =deleteWhitespace("https://" +obj.getSUBSCRIBERID() + obj.getSUBSCRIBERURL());
		this.type = obj.getTYPE();
		if ("buyerApp".equals(this.type)) {
			this.type = "BAP";
		} else if ("sellerApp".equals(this.type)) {
			this.type = "BPP";
		} else if ("gateway".equals(this.type)) {
			this.type = "BG";
		}
		this.updated = CommonUtl.getDateString(obj.getUPDATED());

		if ("seller".equals(type)) {
			this.ukId = obj.getSELLERUNIQUEKEYID();
			this.encrPublicKey = obj.getSELLERENCRYPTION();
			this.signingPublicKey = obj.getSELLERSIGNING();
			this.brId = obj.getSELLERUNIQUEKEYID();
			this.validFrom =  CommonUtl.getDateString(obj.getSELLERVALIDFROM());
			this.validUntil =  CommonUtl.getDateString(obj.getSELLERVALIDUNTIL());
			if ("".equals(city)) {
				this.city = toStringCity(Arrays.asList(new Gson().fromJson(obj.getSELLERCITYCODE(), String[].class)));
			} else {
				this.city = city;
			}
		} else {
			this.ukId =obj.getUNIQUEKEYID();
			this.encrPublicKey =  obj.getENCRYPT();
			this.signingPublicKey =  obj.getSIGNING();
			this.brId =  obj.getUNIQUEKEYID();
			this.validFrom =CommonUtl.getDateString(obj.getVALIDFROM());
			this.validUntil = CommonUtl.getDateString(obj.getVALIDUNTIL());
			if ("".equals(city)) {
				this.city = toStringCity(Arrays.asList(new Gson().fromJson(obj.getCITYCODE(), String[].class)));
			} else {
				this.city = city;
			}
		}

	}
	
	public String toStringCity(List<String> city) {
		StringBuilder data = new StringBuilder();
		for (int i = 0; i < city.size(); i++) {
			if (i == (city.size() - 1)) {
				data.append(city.get(i));
			} else {
				data.append(city.get(i)).append(",");
			}
		}
		return data.toString();
	}
}
